pipeline {
  agent { label "ec2-jnlp-slave" }
  options {
    disableConcurrentBuilds()
    quietPeriod(0)
    ansiColor('xterm')
  }
  environment {
    BUILD_TAG = resolveBuildTag()
  }
  stages {
    stage("Prep Agent") {
      steps {
        script {
          currentBuild.displayName = env.ENVIRONMENT

          def jenkinsUtils = load ".jenkins/groovy/JenkinsUtils.groovy"

          jenkinsUtils.installAwsCli()
          jenkinsUtils.installEcsCli()
          jenkinsUtils.installTerraform("0.12.24")
        }
      }
    }
    stage("Run Inspec Scans") {
      steps {
        script {
          def jenkinsUtils = load ".jenkins/groovy/JenkinsUtils.groovy"
          lock('docker_socket') {
            jenkinsUtils.buildAndPushImageToEcr("saf/postgres_rds", "inspec_postgres_rds", [env.BUILD_TAG, env.JOB_NAME])
          }
          dir('saf/aws') {
            jenkinsUtils.terraformApply(env.APPLICATION_BUCKET, env.ENVIRONMENT, "apply",
              [
                "application_version": env.BUILD_TAG,
                "vpc_name": env.VPC_NAME
              ]
            )
            jenkinsUtils.runInspecScan(
              "inspec_postgres_rds",
              jenkinsUtils.terraformOutput(env.APPLICATION_BUCKET, env.ENVIRONMENT, "inspec_postgres_rds_task_definition_arn"),
              jenkinsUtils.terraformOutput(env.APPLICATION_BUCKET, env.ENVIRONMENT, "inspec_postgres_rds_cluster"),
              jenkinsUtils.terraformOutput(env.APPLICATION_BUCKET, env.ENVIRONMENT, "inspec_postgres_rds_subnets"),
              jenkinsUtils.terraformOutput(env.APPLICATION_BUCKET, env.ENVIRONMENT, "inspec_postgres_rds_security_group")
            )
          }
        }
      }
      post {
        always {
          script {
            archiveArtifacts allowEmptyArchive: true, artifacts: 'saf/aws/saf_results*'
          }
        }
      }
    }
  }
}

def resolveBuildTag() {
  tag_prefix = sh(script: 'cat versionPrefix', returnStdout: true).trim()
  commit_count = sh(script: 'git rev-list --count $GIT_COMMIT', returnStdout: true).trim()
  build_tag = "${tag_prefix}.${commit_count}"
  return build_tag
}
